/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MediaApi.h
 *
 * 
 */

#ifndef POSTPUMA_MediaApi_H_
#define POSTPUMA_MediaApi_H_



#include "PostPuma/ApiClient.h"

#include "PostPuma/model/DeleteMediaFiles_200_response.h"
#include "PostPuma/model/DeleteMediaFiles_request.h"
#include "PostPuma/HttpContent.h"
#include "PostPuma/model/ListMediaFiles_200_response.h"
#include "PostPuma/model/MediaFile.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace PostPuma {

using namespace org::openapitools::client::model;



class  MediaApi 
{
public:

    explicit MediaApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~MediaApi();

    /// <summary>
    /// Delete media files
    /// </summary>
    /// <remarks>
    /// Delete media files
    /// </remarks>
    /// <param name="deleteMediaFilesRequest"> (optional)</param>
    pplx::task<std::shared_ptr<DeleteMediaFiles_200_response>> deleteMediaFiles(
        boost::optional<std::shared_ptr<DeleteMediaFiles_request>> deleteMediaFilesRequest
    ) const;
    /// <summary>
    /// Get media file
    /// </summary>
    /// <remarks>
    /// Get media file
    /// </remarks>
    /// <param name="mediaUuid">Media UUID</param>
    pplx::task<std::shared_ptr<MediaFile>> getMediaFile(
        utility::string_t mediaUuid
    ) const;
    /// <summary>
    /// List media files
    /// </summary>
    /// <remarks>
    /// List media files
    /// </remarks>
    /// <param name="page">Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ListMediaFiles_200_response>> listMediaFiles(
        boost::optional<int32_t> page
    ) const;
    /// <summary>
    /// Upload media file
    /// </summary>
    /// <remarks>
    /// Upload media file
    /// </remarks>
    /// <param name="file"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<MediaFile>> uploadMediaFile(
        boost::optional<std::shared_ptr<HttpContent>> file
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}

#endif /* POSTPUMA_MediaApi_H_ */

