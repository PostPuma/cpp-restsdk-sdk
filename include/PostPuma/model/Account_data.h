/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Account_data.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Account_data_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Account_data_H_


#include "PostPuma/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  Account_data
    : public ModelBase
{
public:
    Account_data();
    virtual ~Account_data();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Account_data members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnionId() const;
    bool unionIdIsSet() const;
    void unsetUnion_id();

    void setUnionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsPrivate() const;
    bool isPrivateIsSet() const;
    void unsetIs_private();

    void setIsPrivate(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isDuetDisabled() const;
    bool duetDisabledIsSet() const;
    void unsetDuet_disabled();

    void setDuetDisabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getPrivacyLevels();
    bool privacyLevelsIsSet() const;
    void unsetPrivacy_levels();

    void setPrivacyLevels(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isStitchDisabled() const;
    bool stitchDisabledIsSet() const;
    void unsetStitch_disabled();

    void setStitchDisabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCommentDisabled() const;
    bool commentDisabledIsSet() const;
    void unsetComment_disabled();

    void setCommentDisabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxVideoPostDurationSec() const;
    bool maxVideoPostDurationSecIsSet() const;
    void unsetMax_video_post_duration_sec();

    void setMaxVideoPostDurationSec(int32_t value);


protected:
    utility::string_t m_Union_id;
    bool m_Union_idIsSet;
    bool m_Is_private;
    bool m_Is_privateIsSet;
    bool m_Duet_disabled;
    bool m_Duet_disabledIsSet;
    std::vector<utility::string_t> m_Privacy_levels;
    bool m_Privacy_levelsIsSet;
    bool m_Stitch_disabled;
    bool m_Stitch_disabledIsSet;
    bool m_Comment_disabled;
    bool m_Comment_disabledIsSet;
    int32_t m_Max_video_post_duration_sec;
    bool m_Max_video_post_duration_secIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Account_data_H_ */
