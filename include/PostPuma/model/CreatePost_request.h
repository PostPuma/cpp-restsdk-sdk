/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreatePost_request.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreatePost_request_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreatePost_request_H_


#include "PostPuma/ModelBase.h"

#include "PostPuma/model/Version.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Version;


/// <summary>
/// 
/// </summary>
class  CreatePost_request
    : public ModelBase
{
public:
    CreatePost_request();
    virtual ~CreatePost_request();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreatePost_request members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDate() const;
    bool dateIsSet() const;
    void unsetdate();

    void setDate(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTime() const;
    bool timeIsSet() const;
    void unsetTime();

    void setTime(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTimezone() const;
    bool timezoneIsSet() const;
    void unsetTimezone();

    void setTimezone(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSchedule() const;
    bool scheduleIsSet() const;
    void unsetSchedule();

    void setSchedule(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isScheduleNow() const;
    bool scheduleNowIsSet() const;
    void unsetSchedule_now();

    void setScheduleNow(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isQueue() const;
    bool queueIsSet() const;
    void unsetQueue();

    void setQueue(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getAccounts();
    bool accountsIsSet() const;
    void unsetAccounts();

    void setAccounts(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();

    void setTags(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Version>>& getVersions();
    bool versionsIsSet() const;
    void unsetVersions();

    void setVersions(const std::vector<std::shared_ptr<Version>>& value);


protected:
    utility::string_t m_date;
    bool m_dateIsSet;
    utility::string_t m_Time;
    bool m_TimeIsSet;
    utility::string_t m_Timezone;
    bool m_TimezoneIsSet;
    bool m_Schedule;
    bool m_ScheduleIsSet;
    bool m_Schedule_now;
    bool m_Schedule_nowIsSet;
    bool m_Queue;
    bool m_QueueIsSet;
    std::vector<int32_t> m_Accounts;
    bool m_AccountsIsSet;
    std::vector<int32_t> m_Tags;
    bool m_TagsIsSet;
    std::vector<std::shared_ptr<Version>> m_Versions;
    bool m_VersionsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreatePost_request_H_ */
