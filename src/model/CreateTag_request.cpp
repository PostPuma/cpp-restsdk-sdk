/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/CreateTag_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateTag_request::CreateTag_request()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Hex_color = utility::conversions::to_string_t("");
    m_Hex_colorIsSet = false;
}

CreateTag_request::~CreateTag_request()
{
}

void CreateTag_request::validate()
{
    // TODO: implement validation
}

web::json::value CreateTag_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Hex_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("hex_color"))] = ModelBase::toJson(m_Hex_color);
    }

    return val;
}

bool CreateTag_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hex_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hex_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHexColor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHexColor);
            setHexColor(refVal_setHexColor);
        }
    }
    return ok;
}

void CreateTag_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Hex_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hex_color")), m_Hex_color));
    }
}

bool CreateTag_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hex_color"))))
    {
        utility::string_t refVal_setHexColor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hex_color"))), refVal_setHexColor );
        setHexColor(refVal_setHexColor);
    }
    return ok;
}

utility::string_t CreateTag_request::getName() const
{
    return m_Name;
}

void CreateTag_request::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreateTag_request::nameIsSet() const
{
    return m_NameIsSet;
}

void CreateTag_request::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreateTag_request::getHexColor() const
{
    return m_Hex_color;
}

void CreateTag_request::setHexColor(const utility::string_t& value)
{
    m_Hex_color = value;
    m_Hex_colorIsSet = true;
}

bool CreateTag_request::hexColorIsSet() const
{
    return m_Hex_colorIsSet;
}

void CreateTag_request::unsetHex_color()
{
    m_Hex_colorIsSet = false;
}
}
}
}
}


