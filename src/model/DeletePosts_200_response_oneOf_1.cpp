/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/DeletePosts_200_response_oneOf_1.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeletePosts_200_response_oneOf_1::DeletePosts_200_response_oneOf_1()
{
    m_To_trash = false;
    m_To_trashIsSet = false;
}

DeletePosts_200_response_oneOf_1::~DeletePosts_200_response_oneOf_1()
{
}

void DeletePosts_200_response_oneOf_1::validate()
{
    // TODO: implement validation
}

web::json::value DeletePosts_200_response_oneOf_1::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_To_trashIsSet)
    {
        val[utility::conversions::to_string_t(U("to_trash"))] = ModelBase::toJson(m_To_trash);
    }

    return val;
}

bool DeletePosts_200_response_oneOf_1::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("to_trash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to_trash")));
        if(!fieldValue.is_null())
        {
            bool refVal_setToTrash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToTrash);
            setToTrash(refVal_setToTrash);
        }
    }
    return ok;
}

void DeletePosts_200_response_oneOf_1::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_To_trashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to_trash")), m_To_trash));
    }
}

bool DeletePosts_200_response_oneOf_1::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("to_trash"))))
    {
        bool refVal_setToTrash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to_trash"))), refVal_setToTrash );
        setToTrash(refVal_setToTrash);
    }
    return ok;
}

bool DeletePosts_200_response_oneOf_1::isToTrash() const
{
    return m_To_trash;
}

void DeletePosts_200_response_oneOf_1::setToTrash(bool value)
{
    m_To_trash = value;
    m_To_trashIsSet = true;
}

bool DeletePosts_200_response_oneOf_1::toTrashIsSet() const
{
    return m_To_trashIsSet;
}

void DeletePosts_200_response_oneOf_1::unsetTo_trash()
{
    m_To_trashIsSet = false;
}
}
}
}
}


