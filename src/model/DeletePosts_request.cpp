/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/DeletePosts_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeletePosts_request::DeletePosts_request()
{
    m_PostsIsSet = false;
    m_Trash = false;
    m_TrashIsSet = false;
}

DeletePosts_request::~DeletePosts_request()
{
}

void DeletePosts_request::validate()
{
    // TODO: implement validation
}

web::json::value DeletePosts_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PostsIsSet)
    {
        val[utility::conversions::to_string_t(U("posts"))] = ModelBase::toJson(m_Posts);
    }
    if(m_TrashIsSet)
    {
        val[utility::conversions::to_string_t(U("trash"))] = ModelBase::toJson(m_Trash);
    }

    return val;
}

bool DeletePosts_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("posts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("posts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPosts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPosts);
            setPosts(refVal_setPosts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("trash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trash")));
        if(!fieldValue.is_null())
        {
            bool refVal_setTrash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrash);
            setTrash(refVal_setTrash);
        }
    }
    return ok;
}

void DeletePosts_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PostsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("posts")), m_Posts));
    }
    if(m_TrashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trash")), m_Trash));
    }
}

bool DeletePosts_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("posts"))))
    {
        std::vector<utility::string_t> refVal_setPosts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("posts"))), refVal_setPosts );
        setPosts(refVal_setPosts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("trash"))))
    {
        bool refVal_setTrash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trash"))), refVal_setTrash );
        setTrash(refVal_setTrash);
    }
    return ok;
}

std::vector<utility::string_t>& DeletePosts_request::getPosts()
{
    return m_Posts;
}

void DeletePosts_request::setPosts(const std::vector<utility::string_t>& value)
{
    m_Posts = value;
    m_PostsIsSet = true;
}

bool DeletePosts_request::postsIsSet() const
{
    return m_PostsIsSet;
}

void DeletePosts_request::unsetPosts()
{
    m_PostsIsSet = false;
}
bool DeletePosts_request::isTrash() const
{
    return m_Trash;
}

void DeletePosts_request::setTrash(bool value)
{
    m_Trash = value;
    m_TrashIsSet = true;
}

bool DeletePosts_request::trashIsSet() const
{
    return m_TrashIsSet;
}

void DeletePosts_request::unsetTrash()
{
    m_TrashIsSet = false;
}
}
}
}
}


