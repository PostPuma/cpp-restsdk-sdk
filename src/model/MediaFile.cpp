/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/MediaFile.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MediaFile::MediaFile()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Mime_type = utility::conversions::to_string_t("");
    m_Mime_typeIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Thumb_url = utility::conversions::to_string_t("");
    m_Thumb_urlIsSet = false;
    m_Is_video = false;
    m_Is_videoIsSet = false;
    m_Created_at = utility::conversions::to_string_t("");
    m_Created_atIsSet = false;
}

MediaFile::~MediaFile()
{
}

void MediaFile::validate()
{
    // TODO: implement validation
}

web::json::value MediaFile::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Mime_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("mime_type"))] = ModelBase::toJson(m_Mime_type);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_Thumb_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("thumb_url"))] = ModelBase::toJson(m_Thumb_url);
    }
    if(m_Is_videoIsSet)
    {
        val[utility::conversions::to_string_t(U("is_video"))] = ModelBase::toJson(m_Is_video);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }

    return val;
}

bool MediaFile::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mime_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mime_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMimeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMimeType);
            setMimeType(refVal_setMimeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thumb_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thumb_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThumbUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThumbUrl);
            setThumbUrl(refVal_setThumbUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_video"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_video")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsVideo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsVideo);
            setIsVideo(refVal_setIsVideo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    return ok;
}

void MediaFile::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Mime_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mime_type")), m_Mime_type));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_Thumb_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thumb_url")), m_Thumb_url));
    }
    if(m_Is_videoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_video")), m_Is_video));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
}

bool MediaFile::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mime_type"))))
    {
        utility::string_t refVal_setMimeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mime_type"))), refVal_setMimeType );
        setMimeType(refVal_setMimeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thumb_url"))))
    {
        utility::string_t refVal_setThumbUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thumb_url"))), refVal_setThumbUrl );
        setThumbUrl(refVal_setThumbUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_video"))))
    {
        bool refVal_setIsVideo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_video"))), refVal_setIsVideo );
        setIsVideo(refVal_setIsVideo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::string_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}

utility::string_t MediaFile::getId() const
{
    return m_Id;
}

void MediaFile::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool MediaFile::idIsSet() const
{
    return m_IdIsSet;
}

void MediaFile::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t MediaFile::getUuid() const
{
    return m_Uuid;
}

void MediaFile::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool MediaFile::uuidIsSet() const
{
    return m_UuidIsSet;
}

void MediaFile::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t MediaFile::getName() const
{
    return m_Name;
}

void MediaFile::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool MediaFile::nameIsSet() const
{
    return m_NameIsSet;
}

void MediaFile::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t MediaFile::getMimeType() const
{
    return m_Mime_type;
}

void MediaFile::setMimeType(const utility::string_t& value)
{
    m_Mime_type = value;
    m_Mime_typeIsSet = true;
}

bool MediaFile::mimeTypeIsSet() const
{
    return m_Mime_typeIsSet;
}

void MediaFile::unsetMime_type()
{
    m_Mime_typeIsSet = false;
}
utility::string_t MediaFile::getType() const
{
    return m_Type;
}

void MediaFile::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool MediaFile::typeIsSet() const
{
    return m_TypeIsSet;
}

void MediaFile::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t MediaFile::getUrl() const
{
    return m_Url;
}

void MediaFile::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool MediaFile::urlIsSet() const
{
    return m_UrlIsSet;
}

void MediaFile::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t MediaFile::getThumbUrl() const
{
    return m_Thumb_url;
}

void MediaFile::setThumbUrl(const utility::string_t& value)
{
    m_Thumb_url = value;
    m_Thumb_urlIsSet = true;
}

bool MediaFile::thumbUrlIsSet() const
{
    return m_Thumb_urlIsSet;
}

void MediaFile::unsetThumb_url()
{
    m_Thumb_urlIsSet = false;
}
bool MediaFile::isIsVideo() const
{
    return m_Is_video;
}

void MediaFile::setIsVideo(bool value)
{
    m_Is_video = value;
    m_Is_videoIsSet = true;
}

bool MediaFile::isVideoIsSet() const
{
    return m_Is_videoIsSet;
}

void MediaFile::unsetIs_video()
{
    m_Is_videoIsSet = false;
}
utility::string_t MediaFile::getCreatedAt() const
{
    return m_Created_at;
}

void MediaFile::setCreatedAt(const utility::string_t& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool MediaFile::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void MediaFile::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
}
}
}
}


