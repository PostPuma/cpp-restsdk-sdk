/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/Post.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Post::Post()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_AccountsIsSet = false;
    m_VersionsIsSet = false;
    m_TagsIsSet = false;
    m_UserIsSet = false;
    m_Scheduled_at = utility::conversions::to_string_t("");
    m_Scheduled_atIsSet = false;
    m_Published_at = utility::conversions::to_string_t("");
    m_Published_atIsSet = false;
    m_Created_at = utility::conversions::to_string_t("");
    m_Created_atIsSet = false;
    m_Trashed = false;
    m_TrashedIsSet = false;
}

Post::~Post()
{
}

void Post::validate()
{
    // TODO: implement validation
}

web::json::value Post::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_AccountsIsSet)
    {
        val[utility::conversions::to_string_t(U("accounts"))] = ModelBase::toJson(m_Accounts);
    }
    if(m_VersionsIsSet)
    {
        val[utility::conversions::to_string_t(U("versions"))] = ModelBase::toJson(m_Versions);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }
    if(m_Scheduled_atIsSet)
    {
        val[utility::conversions::to_string_t(U("scheduled_at"))] = ModelBase::toJson(m_Scheduled_at);
    }
    if(m_Published_atIsSet)
    {
        val[utility::conversions::to_string_t(U("published_at"))] = ModelBase::toJson(m_Published_at);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_TrashedIsSet)
    {
        val[utility::conversions::to_string_t(U("trashed"))] = ModelBase::toJson(m_Trashed);
    }

    return val;
}

bool Post::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accounts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Account>> refVal_setAccounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccounts);
            setAccounts(refVal_setAccounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("versions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("versions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Version>> refVal_setVersions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersions);
            setVersions(refVal_setVersions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Tag>> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Post_user> refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scheduled_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scheduled_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScheduledAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduledAt);
            setScheduledAt(refVal_setScheduledAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("published_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("published_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPublishedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPublishedAt);
            setPublishedAt(refVal_setPublishedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("trashed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trashed")));
        if(!fieldValue.is_null())
        {
            bool refVal_setTrashed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrashed);
            setTrashed(refVal_setTrashed);
        }
    }
    return ok;
}

void Post::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_AccountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accounts")), m_Accounts));
    }
    if(m_VersionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("versions")), m_Versions));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
    if(m_Scheduled_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scheduled_at")), m_Scheduled_at));
    }
    if(m_Published_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("published_at")), m_Published_at));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_TrashedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trashed")), m_Trashed));
    }
}

bool Post::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int32_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accounts"))))
    {
        std::vector<std::shared_ptr<Account>> refVal_setAccounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accounts"))), refVal_setAccounts );
        setAccounts(refVal_setAccounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("versions"))))
    {
        std::vector<std::shared_ptr<Version>> refVal_setVersions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("versions"))), refVal_setVersions );
        setVersions(refVal_setVersions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<std::shared_ptr<Tag>> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        std::shared_ptr<Post_user> refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scheduled_at"))))
    {
        utility::string_t refVal_setScheduledAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scheduled_at"))), refVal_setScheduledAt );
        setScheduledAt(refVal_setScheduledAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("published_at"))))
    {
        utility::string_t refVal_setPublishedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("published_at"))), refVal_setPublishedAt );
        setPublishedAt(refVal_setPublishedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::string_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("trashed"))))
    {
        bool refVal_setTrashed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trashed"))), refVal_setTrashed );
        setTrashed(refVal_setTrashed);
    }
    return ok;
}

int32_t Post::getId() const
{
    return m_Id;
}

void Post::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Post::idIsSet() const
{
    return m_IdIsSet;
}

void Post::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Post::getUuid() const
{
    return m_Uuid;
}

void Post::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Post::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Post::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t Post::getStatus() const
{
    return m_Status;
}

void Post::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Post::statusIsSet() const
{
    return m_StatusIsSet;
}

void Post::unsetStatus()
{
    m_StatusIsSet = false;
}
std::vector<std::shared_ptr<Account>>& Post::getAccounts()
{
    return m_Accounts;
}

void Post::setAccounts(const std::vector<std::shared_ptr<Account>>& value)
{
    m_Accounts = value;
    m_AccountsIsSet = true;
}

bool Post::accountsIsSet() const
{
    return m_AccountsIsSet;
}

void Post::unsetAccounts()
{
    m_AccountsIsSet = false;
}
std::vector<std::shared_ptr<Version>>& Post::getVersions()
{
    return m_Versions;
}

void Post::setVersions(const std::vector<std::shared_ptr<Version>>& value)
{
    m_Versions = value;
    m_VersionsIsSet = true;
}

bool Post::versionsIsSet() const
{
    return m_VersionsIsSet;
}

void Post::unsetVersions()
{
    m_VersionsIsSet = false;
}
std::vector<std::shared_ptr<Tag>>& Post::getTags()
{
    return m_Tags;
}

void Post::setTags(const std::vector<std::shared_ptr<Tag>>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool Post::tagsIsSet() const
{
    return m_TagsIsSet;
}

void Post::unsetTags()
{
    m_TagsIsSet = false;
}
std::shared_ptr<Post_user> Post::getUser() const
{
    return m_User;
}

void Post::setUser(const std::shared_ptr<Post_user>& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool Post::userIsSet() const
{
    return m_UserIsSet;
}

void Post::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t Post::getScheduledAt() const
{
    return m_Scheduled_at;
}

void Post::setScheduledAt(const utility::string_t& value)
{
    m_Scheduled_at = value;
    m_Scheduled_atIsSet = true;
}

bool Post::scheduledAtIsSet() const
{
    return m_Scheduled_atIsSet;
}

void Post::unsetScheduled_at()
{
    m_Scheduled_atIsSet = false;
}
utility::string_t Post::getPublishedAt() const
{
    return m_Published_at;
}

void Post::setPublishedAt(const utility::string_t& value)
{
    m_Published_at = value;
    m_Published_atIsSet = true;
}

bool Post::publishedAtIsSet() const
{
    return m_Published_atIsSet;
}

void Post::unsetPublished_at()
{
    m_Published_atIsSet = false;
}
utility::string_t Post::getCreatedAt() const
{
    return m_Created_at;
}

void Post::setCreatedAt(const utility::string_t& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool Post::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void Post::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
bool Post::isTrashed() const
{
    return m_Trashed;
}

void Post::setTrashed(bool value)
{
    m_Trashed = value;
    m_TrashedIsSet = true;
}

bool Post::trashedIsSet() const
{
    return m_TrashedIsSet;
}

void Post::unsetTrashed()
{
    m_TrashedIsSet = false;
}
}
}
}
}


