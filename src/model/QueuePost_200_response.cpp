/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/QueuePost_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



QueuePost_200_response::QueuePost_200_response()
{
    m_Success = false;
    m_SuccessIsSet = false;
    m_Scheduled_at = utility::conversions::to_string_t("");
    m_Scheduled_atIsSet = false;
}

QueuePost_200_response::~QueuePost_200_response()
{
}

void QueuePost_200_response::validate()
{
    // TODO: implement validation
}

web::json::value QueuePost_200_response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SuccessIsSet)
    {
        val[utility::conversions::to_string_t(U("success"))] = ModelBase::toJson(m_Success);
    }
    if(m_Scheduled_atIsSet)
    {
        val[utility::conversions::to_string_t(U("scheduled_at"))] = ModelBase::toJson(m_Scheduled_at);
    }

    return val;
}

bool QueuePost_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("success"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("success")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSuccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuccess);
            setSuccess(refVal_setSuccess);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scheduled_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scheduled_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScheduledAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduledAt);
            setScheduledAt(refVal_setScheduledAt);
        }
    }
    return ok;
}

void QueuePost_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SuccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("success")), m_Success));
    }
    if(m_Scheduled_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scheduled_at")), m_Scheduled_at));
    }
}

bool QueuePost_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("success"))))
    {
        bool refVal_setSuccess;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("success"))), refVal_setSuccess );
        setSuccess(refVal_setSuccess);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scheduled_at"))))
    {
        utility::string_t refVal_setScheduledAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scheduled_at"))), refVal_setScheduledAt );
        setScheduledAt(refVal_setScheduledAt);
    }
    return ok;
}

bool QueuePost_200_response::isSuccess() const
{
    return m_Success;
}

void QueuePost_200_response::setSuccess(bool value)
{
    m_Success = value;
    m_SuccessIsSet = true;
}

bool QueuePost_200_response::successIsSet() const
{
    return m_SuccessIsSet;
}

void QueuePost_200_response::unsetSuccess()
{
    m_SuccessIsSet = false;
}
utility::string_t QueuePost_200_response::getScheduledAt() const
{
    return m_Scheduled_at;
}

void QueuePost_200_response::setScheduledAt(const utility::string_t& value)
{
    m_Scheduled_at = value;
    m_Scheduled_atIsSet = true;
}

bool QueuePost_200_response::scheduledAtIsSet() const
{
    return m_Scheduled_atIsSet;
}

void QueuePost_200_response::unsetScheduled_at()
{
    m_Scheduled_atIsSet = false;
}
}
}
}
}


