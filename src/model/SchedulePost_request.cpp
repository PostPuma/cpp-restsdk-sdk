/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/SchedulePost_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SchedulePost_request::SchedulePost_request()
{
    m_PostNow = false;
    m_PostNowIsSet = false;
}

SchedulePost_request::~SchedulePost_request()
{
}

void SchedulePost_request::validate()
{
    // TODO: implement validation
}

web::json::value SchedulePost_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PostNowIsSet)
    {
        val[utility::conversions::to_string_t(U("postNow"))] = ModelBase::toJson(m_PostNow);
    }

    return val;
}

bool SchedulePost_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("postNow"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("postNow")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPostNow;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPostNow);
            setPostNow(refVal_setPostNow);
        }
    }
    return ok;
}

void SchedulePost_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PostNowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("postNow")), m_PostNow));
    }
}

bool SchedulePost_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("postNow"))))
    {
        bool refVal_setPostNow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("postNow"))), refVal_setPostNow );
        setPostNow(refVal_setPostNow);
    }
    return ok;
}

bool SchedulePost_request::isPostNow() const
{
    return m_PostNow;
}

void SchedulePost_request::setPostNow(bool value)
{
    m_PostNow = value;
    m_PostNowIsSet = true;
}

bool SchedulePost_request::postNowIsSet() const
{
    return m_PostNowIsSet;
}

void SchedulePost_request::unsetPostNow()
{
    m_PostNowIsSet = false;
}
}
}
}
}


