/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/Version.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Version::Version()
{
    m_Account_id = 0;
    m_Account_idIsSet = false;
    m_Is_original = false;
    m_Is_originalIsSet = false;
    m_ContentIsSet = false;
    m_OptionsIsSet = false;
}

Version::~Version()
{
}

void Version::validate()
{
    // TODO: implement validation
}

web::json::value Version::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("account_id"))] = ModelBase::toJson(m_Account_id);
    }
    if(m_Is_originalIsSet)
    {
        val[utility::conversions::to_string_t(U("is_original"))] = ModelBase::toJson(m_Is_original);
    }
    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t(U("content"))] = ModelBase::toJson(m_Content);
    }
    if(m_OptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("options"))] = ModelBase::toJson(m_Options);
    }

    return val;
}

bool Version::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountId);
            setAccountId(refVal_setAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_original"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_original")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsOriginal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsOriginal);
            setIsOriginal(refVal_setIsOriginal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_content> refVal_setContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContent);
            setContent(refVal_setContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("options"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("options")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_options> refVal_setOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptions);
            setOptions(refVal_setOptions);
        }
    }
    return ok;
}

void Version::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_id")), m_Account_id));
    }
    if(m_Is_originalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_original")), m_Is_original));
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content")), m_Content));
    }
    if(m_OptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("options")), m_Options));
    }
}

bool Version::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("account_id"))))
    {
        int32_t refVal_setAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_id"))), refVal_setAccountId );
        setAccountId(refVal_setAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_original"))))
    {
        bool refVal_setIsOriginal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_original"))), refVal_setIsOriginal );
        setIsOriginal(refVal_setIsOriginal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content"))))
    {
        std::shared_ptr<Version_content> refVal_setContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content"))), refVal_setContent );
        setContent(refVal_setContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("options"))))
    {
        std::shared_ptr<Version_options> refVal_setOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("options"))), refVal_setOptions );
        setOptions(refVal_setOptions);
    }
    return ok;
}

int32_t Version::getAccountId() const
{
    return m_Account_id;
}

void Version::setAccountId(int32_t value)
{
    m_Account_id = value;
    m_Account_idIsSet = true;
}

bool Version::accountIdIsSet() const
{
    return m_Account_idIsSet;
}

void Version::unsetAccount_id()
{
    m_Account_idIsSet = false;
}
bool Version::isIsOriginal() const
{
    return m_Is_original;
}

void Version::setIsOriginal(bool value)
{
    m_Is_original = value;
    m_Is_originalIsSet = true;
}

bool Version::isOriginalIsSet() const
{
    return m_Is_originalIsSet;
}

void Version::unsetIs_original()
{
    m_Is_originalIsSet = false;
}
std::shared_ptr<Version_content> Version::getContent() const
{
    return m_Content;
}

void Version::setContent(const std::shared_ptr<Version_content>& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool Version::contentIsSet() const
{
    return m_ContentIsSet;
}

void Version::unsetContent()
{
    m_ContentIsSet = false;
}
std::shared_ptr<Version_options> Version::getOptions() const
{
    return m_Options;
}

void Version::setOptions(const std::shared_ptr<Version_options>& value)
{
    m_Options = value;
    m_OptionsIsSet = true;
}

bool Version::optionsIsSet() const
{
    return m_OptionsIsSet;
}

void Version::unsetOptions()
{
    m_OptionsIsSet = false;
}
}
}
}
}


