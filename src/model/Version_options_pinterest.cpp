/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/Version_options_pinterest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Version_options_pinterest::Version_options_pinterest()
{
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
    m_BoardsIsSet = false;
}

Version_options_pinterest::~Version_options_pinterest()
{
}

void Version_options_pinterest::validate()
{
    // TODO: implement validation
}

web::json::value Version_options_pinterest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_LinkIsSet)
    {
        val[utility::conversions::to_string_t(U("link"))] = ModelBase::toJson(m_Link);
    }
    if(m_BoardsIsSet)
    {
        val[utility::conversions::to_string_t(U("boards"))] = ModelBase::toJson(m_Boards);
    }

    return val;
}

bool Version_options_pinterest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLink);
            setLink(refVal_setLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("boards"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("boards")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_options_pinterest_boards> refVal_setBoards;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoards);
            setBoards(refVal_setBoards);
        }
    }
    return ok;
}

void Version_options_pinterest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link")), m_Link));
    }
    if(m_BoardsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("boards")), m_Boards));
    }
}

bool Version_options_pinterest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link"))))
    {
        utility::string_t refVal_setLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link"))), refVal_setLink );
        setLink(refVal_setLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("boards"))))
    {
        std::shared_ptr<Version_options_pinterest_boards> refVal_setBoards;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("boards"))), refVal_setBoards );
        setBoards(refVal_setBoards);
    }
    return ok;
}

utility::string_t Version_options_pinterest::getTitle() const
{
    return m_Title;
}

void Version_options_pinterest::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool Version_options_pinterest::titleIsSet() const
{
    return m_TitleIsSet;
}

void Version_options_pinterest::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t Version_options_pinterest::getLink() const
{
    return m_Link;
}

void Version_options_pinterest::setLink(const utility::string_t& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}

bool Version_options_pinterest::linkIsSet() const
{
    return m_LinkIsSet;
}

void Version_options_pinterest::unsetLink()
{
    m_LinkIsSet = false;
}
std::shared_ptr<Version_options_pinterest_boards> Version_options_pinterest::getBoards() const
{
    return m_Boards;
}

void Version_options_pinterest::setBoards(const std::shared_ptr<Version_options_pinterest_boards>& value)
{
    m_Boards = value;
    m_BoardsIsSet = true;
}

bool Version_options_pinterest::boardsIsSet() const
{
    return m_BoardsIsSet;
}

void Version_options_pinterest::unsetBoards()
{
    m_BoardsIsSet = false;
}
}
}
}
}


