/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PostPuma/model/Version_options_tiktok.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Version_options_tiktok::Version_options_tiktok()
{
    m_Privacy_levelIsSet = false;
    m_Allow_commentsIsSet = false;
    m_Allow_duetIsSet = false;
    m_Allow_stitchIsSet = false;
    m_Content_disclosureIsSet = false;
    m_Brand_organic_toggleIsSet = false;
    m_Brand_content_toggleIsSet = false;
}

Version_options_tiktok::~Version_options_tiktok()
{
}

void Version_options_tiktok::validate()
{
    // TODO: implement validation
}

web::json::value Version_options_tiktok::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Privacy_levelIsSet)
    {
        val[utility::conversions::to_string_t(U("privacy_level"))] = ModelBase::toJson(m_Privacy_level);
    }
    if(m_Allow_commentsIsSet)
    {
        val[utility::conversions::to_string_t(U("allow_comments"))] = ModelBase::toJson(m_Allow_comments);
    }
    if(m_Allow_duetIsSet)
    {
        val[utility::conversions::to_string_t(U("allow_duet"))] = ModelBase::toJson(m_Allow_duet);
    }
    if(m_Allow_stitchIsSet)
    {
        val[utility::conversions::to_string_t(U("allow_stitch"))] = ModelBase::toJson(m_Allow_stitch);
    }
    if(m_Content_disclosureIsSet)
    {
        val[utility::conversions::to_string_t(U("content_disclosure"))] = ModelBase::toJson(m_Content_disclosure);
    }
    if(m_Brand_organic_toggleIsSet)
    {
        val[utility::conversions::to_string_t(U("brand_organic_toggle"))] = ModelBase::toJson(m_Brand_organic_toggle);
    }
    if(m_Brand_content_toggleIsSet)
    {
        val[utility::conversions::to_string_t(U("brand_content_toggle"))] = ModelBase::toJson(m_Brand_content_toggle);
    }

    return val;
}

bool Version_options_tiktok::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("privacy_level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("privacy_level")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setPrivacyLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrivacyLevel);
            setPrivacyLevel(refVal_setPrivacyLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allow_comments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allow_comments")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setAllowComments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllowComments);
            setAllowComments(refVal_setAllowComments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allow_duet"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allow_duet")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setAllowDuet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllowDuet);
            setAllowDuet(refVal_setAllowDuet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allow_stitch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allow_stitch")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setAllowStitch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllowStitch);
            setAllowStitch(refVal_setAllowStitch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content_disclosure"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content_disclosure")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setContentDisclosure;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentDisclosure);
            setContentDisclosure(refVal_setContentDisclosure);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("brand_organic_toggle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("brand_organic_toggle")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setBrandOrganicToggle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBrandOrganicToggle);
            setBrandOrganicToggle(refVal_setBrandOrganicToggle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("brand_content_toggle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("brand_content_toggle")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setBrandContentToggle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBrandContentToggle);
            setBrandContentToggle(refVal_setBrandContentToggle);
        }
    }
    return ok;
}

void Version_options_tiktok::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Privacy_levelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("privacy_level")), m_Privacy_level));
    }
    if(m_Allow_commentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allow_comments")), m_Allow_comments));
    }
    if(m_Allow_duetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allow_duet")), m_Allow_duet));
    }
    if(m_Allow_stitchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allow_stitch")), m_Allow_stitch));
    }
    if(m_Content_disclosureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content_disclosure")), m_Content_disclosure));
    }
    if(m_Brand_organic_toggleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("brand_organic_toggle")), m_Brand_organic_toggle));
    }
    if(m_Brand_content_toggleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("brand_content_toggle")), m_Brand_content_toggle));
    }
}

bool Version_options_tiktok::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("privacy_level"))))
    {
        std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setPrivacyLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("privacy_level"))), refVal_setPrivacyLevel );
        setPrivacyLevel(refVal_setPrivacyLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allow_comments"))))
    {
        std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setAllowComments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allow_comments"))), refVal_setAllowComments );
        setAllowComments(refVal_setAllowComments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allow_duet"))))
    {
        std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setAllowDuet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allow_duet"))), refVal_setAllowDuet );
        setAllowDuet(refVal_setAllowDuet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allow_stitch"))))
    {
        std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setAllowStitch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allow_stitch"))), refVal_setAllowStitch );
        setAllowStitch(refVal_setAllowStitch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content_disclosure"))))
    {
        std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setContentDisclosure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content_disclosure"))), refVal_setContentDisclosure );
        setContentDisclosure(refVal_setContentDisclosure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("brand_organic_toggle"))))
    {
        std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setBrandOrganicToggle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("brand_organic_toggle"))), refVal_setBrandOrganicToggle );
        setBrandOrganicToggle(refVal_setBrandOrganicToggle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("brand_content_toggle"))))
    {
        std::shared_ptr<Version_options_tiktok_privacy_level> refVal_setBrandContentToggle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("brand_content_toggle"))), refVal_setBrandContentToggle );
        setBrandContentToggle(refVal_setBrandContentToggle);
    }
    return ok;
}

std::shared_ptr<Version_options_tiktok_privacy_level> Version_options_tiktok::getPrivacyLevel() const
{
    return m_Privacy_level;
}

void Version_options_tiktok::setPrivacyLevel(const std::shared_ptr<Version_options_tiktok_privacy_level>& value)
{
    m_Privacy_level = value;
    m_Privacy_levelIsSet = true;
}

bool Version_options_tiktok::privacyLevelIsSet() const
{
    return m_Privacy_levelIsSet;
}

void Version_options_tiktok::unsetPrivacy_level()
{
    m_Privacy_levelIsSet = false;
}
std::shared_ptr<Version_options_tiktok_privacy_level> Version_options_tiktok::getAllowComments() const
{
    return m_Allow_comments;
}

void Version_options_tiktok::setAllowComments(const std::shared_ptr<Version_options_tiktok_privacy_level>& value)
{
    m_Allow_comments = value;
    m_Allow_commentsIsSet = true;
}

bool Version_options_tiktok::allowCommentsIsSet() const
{
    return m_Allow_commentsIsSet;
}

void Version_options_tiktok::unsetAllow_comments()
{
    m_Allow_commentsIsSet = false;
}
std::shared_ptr<Version_options_tiktok_privacy_level> Version_options_tiktok::getAllowDuet() const
{
    return m_Allow_duet;
}

void Version_options_tiktok::setAllowDuet(const std::shared_ptr<Version_options_tiktok_privacy_level>& value)
{
    m_Allow_duet = value;
    m_Allow_duetIsSet = true;
}

bool Version_options_tiktok::allowDuetIsSet() const
{
    return m_Allow_duetIsSet;
}

void Version_options_tiktok::unsetAllow_duet()
{
    m_Allow_duetIsSet = false;
}
std::shared_ptr<Version_options_tiktok_privacy_level> Version_options_tiktok::getAllowStitch() const
{
    return m_Allow_stitch;
}

void Version_options_tiktok::setAllowStitch(const std::shared_ptr<Version_options_tiktok_privacy_level>& value)
{
    m_Allow_stitch = value;
    m_Allow_stitchIsSet = true;
}

bool Version_options_tiktok::allowStitchIsSet() const
{
    return m_Allow_stitchIsSet;
}

void Version_options_tiktok::unsetAllow_stitch()
{
    m_Allow_stitchIsSet = false;
}
std::shared_ptr<Version_options_tiktok_privacy_level> Version_options_tiktok::getContentDisclosure() const
{
    return m_Content_disclosure;
}

void Version_options_tiktok::setContentDisclosure(const std::shared_ptr<Version_options_tiktok_privacy_level>& value)
{
    m_Content_disclosure = value;
    m_Content_disclosureIsSet = true;
}

bool Version_options_tiktok::contentDisclosureIsSet() const
{
    return m_Content_disclosureIsSet;
}

void Version_options_tiktok::unsetContent_disclosure()
{
    m_Content_disclosureIsSet = false;
}
std::shared_ptr<Version_options_tiktok_privacy_level> Version_options_tiktok::getBrandOrganicToggle() const
{
    return m_Brand_organic_toggle;
}

void Version_options_tiktok::setBrandOrganicToggle(const std::shared_ptr<Version_options_tiktok_privacy_level>& value)
{
    m_Brand_organic_toggle = value;
    m_Brand_organic_toggleIsSet = true;
}

bool Version_options_tiktok::brandOrganicToggleIsSet() const
{
    return m_Brand_organic_toggleIsSet;
}

void Version_options_tiktok::unsetBrand_organic_toggle()
{
    m_Brand_organic_toggleIsSet = false;
}
std::shared_ptr<Version_options_tiktok_privacy_level> Version_options_tiktok::getBrandContentToggle() const
{
    return m_Brand_content_toggle;
}

void Version_options_tiktok::setBrandContentToggle(const std::shared_ptr<Version_options_tiktok_privacy_level>& value)
{
    m_Brand_content_toggle = value;
    m_Brand_content_toggleIsSet = true;
}

bool Version_options_tiktok::brandContentToggleIsSet() const
{
    return m_Brand_content_toggleIsSet;
}

void Version_options_tiktok::unsetBrand_content_toggle()
{
    m_Brand_content_toggleIsSet = false;
}
}
}
}
}


